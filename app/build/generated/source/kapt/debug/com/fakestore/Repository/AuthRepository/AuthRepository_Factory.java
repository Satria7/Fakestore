// Generated by Dagger (https://dagger.dev).
package com.fakestore.Repository.AuthRepository;

import com.fakestore.Network.api.data.AuthApi;
import com.fakestore.datastore.PreferenceDataStore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthRepository_Factory implements Factory<AuthRepository> {
  private final Provider<AuthApi> apiProvider;

  private final Provider<PreferenceDataStore> preferencesProvider;

  public AuthRepository_Factory(Provider<AuthApi> apiProvider,
      Provider<PreferenceDataStore> preferencesProvider) {
    this.apiProvider = apiProvider;
    this.preferencesProvider = preferencesProvider;
  }

  @Override
  public AuthRepository get() {
    return newInstance(apiProvider.get(), preferencesProvider.get());
  }

  public static AuthRepository_Factory create(Provider<AuthApi> apiProvider,
      Provider<PreferenceDataStore> preferencesProvider) {
    return new AuthRepository_Factory(apiProvider, preferencesProvider);
  }

  public static AuthRepository newInstance(AuthApi api, PreferenceDataStore preferences) {
    return new AuthRepository(api, preferences);
  }
}
