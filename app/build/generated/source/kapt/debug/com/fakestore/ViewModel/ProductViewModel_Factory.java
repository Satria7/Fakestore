// Generated by Dagger (https://dagger.dev).
package com.fakestore.ViewModel;

import com.fakestore.Repository.ProductRepository;
import com.fakestore.Repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductViewModel_Factory implements Factory<ProductViewModel> {
  private final Provider<ProductRepository> repositoryProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  public ProductViewModel_Factory(Provider<ProductRepository> repositoryProvider,
      Provider<UserRepository> userRepositoryProvider) {
    this.repositoryProvider = repositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public ProductViewModel get() {
    return newInstance(repositoryProvider.get(), userRepositoryProvider.get());
  }

  public static ProductViewModel_Factory create(Provider<ProductRepository> repositoryProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return new ProductViewModel_Factory(repositoryProvider, userRepositoryProvider);
  }

  public static ProductViewModel newInstance(ProductRepository repository,
      UserRepository userRepository) {
    return new ProductViewModel(repository, userRepository);
  }
}
