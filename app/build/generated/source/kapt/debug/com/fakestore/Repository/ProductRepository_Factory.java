// Generated by Dagger (https://dagger.dev).
package com.fakestore.Repository;

import androidx.lifecycle.SavedStateHandle;
import com.fakestore.Network.api.data.StoreApi;
import com.fakestore.Room.ProductDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductRepository_Factory implements Factory<ProductRepository> {
  private final Provider<StoreApi> apiProvider;

  private final Provider<ProductDatabase> dbProvider;

  private final Provider<SavedStateHandle> stateProvider;

  public ProductRepository_Factory(Provider<StoreApi> apiProvider,
      Provider<ProductDatabase> dbProvider, Provider<SavedStateHandle> stateProvider) {
    this.apiProvider = apiProvider;
    this.dbProvider = dbProvider;
    this.stateProvider = stateProvider;
  }

  @Override
  public ProductRepository get() {
    return newInstance(apiProvider.get(), dbProvider.get(), stateProvider.get());
  }

  public static ProductRepository_Factory create(Provider<StoreApi> apiProvider,
      Provider<ProductDatabase> dbProvider, Provider<SavedStateHandle> stateProvider) {
    return new ProductRepository_Factory(apiProvider, dbProvider, stateProvider);
  }

  public static ProductRepository newInstance(StoreApi api, ProductDatabase db,
      SavedStateHandle state) {
    return new ProductRepository(api, db, state);
  }
}
