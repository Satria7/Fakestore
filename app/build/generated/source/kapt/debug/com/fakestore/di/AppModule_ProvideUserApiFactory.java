// Generated by Dagger (https://dagger.dev).
package com.fakestore.di;

import android.content.Context;
import com.fakestore.Network.api.RemoteDataSource;
import com.fakestore.Network.api.data.UserApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideUserApiFactory implements Factory<UserApi> {
  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  private final Provider<Context> contextProvider;

  public AppModule_ProvideUserApiFactory(Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<Context> contextProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public UserApi get() {
    return provideUserApi(remoteDataSourceProvider.get(), contextProvider.get());
  }

  public static AppModule_ProvideUserApiFactory create(
      Provider<RemoteDataSource> remoteDataSourceProvider, Provider<Context> contextProvider) {
    return new AppModule_ProvideUserApiFactory(remoteDataSourceProvider, contextProvider);
  }

  public static UserApi provideUserApi(RemoteDataSource remoteDataSource, Context context) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideUserApi(remoteDataSource, context));
  }
}
